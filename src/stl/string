#pragma once

#include <functions.h>
#include <screen.h>

#include <stddef.h>

namespace std {

class string {
private:
	char* m_cstr;
	size_t m_size;
public:
	string() {
		m_cstr = new char[1];
		m_cstr[0] = '\0';
		m_size = 0;
	}
	
	string(const string& old) {
		m_cstr = new char[old.size() + 1];
		memcpy(m_cstr, old.c_str(), old.size() + 1);
		m_size = old.size();
	}

	string(const char* _str) {
		m_size = strlen(_str);
		m_cstr = new char[m_size+1];
		memcpy(m_cstr, _str, m_size+1);
	}	

	void operator+=(const string& _val) {
		char* newBuf = new char[_val.size() + m_size + 1];		
		memcpy(newBuf, m_cstr, m_size);
		memcpy(newBuf + m_size, _val.c_str(), _val.size() + 1);
		delete[] m_cstr;
		m_cstr = newBuf;
		m_size += _val.size();
	}

	string operator+(const string& other) {
		char* newBuf = new char[other.size() + m_size + 1];
		memcpy(newBuf, m_cstr, m_size);
		memcpy(newBuf + m_size, other.c_str(), other.size() + 1);
		return newBuf;
	}

	void operator+=(char val) {
		
		char* newBuf = new char[m_size + 2];
		
		memcpy(newBuf, m_cstr, m_size);
		newBuf[m_size] = val;
		newBuf[m_size+1] = '\0';
		m_size++;
		delete[] m_cstr;
		m_cstr = newBuf;
	}

	string& erase(size_t pos = 0, size_t len = 1) {
		char* buf = new char[m_size - len + 1];
		int a = 0;
		for (int i = 0; i < m_size; i++) {
			if (i >= pos && i < pos + len) {
				continue;
			}
			buf[a] = m_cstr[i];
			a++;
		}
		m_cstr = buf;
		m_size = m_size - len;
		return *this;
	}
 
	void pop_back() {
		erase(m_size-1, 1);
	}

	void operator=(const char* other) {
		m_size = strlen(other);
		m_cstr = new char[m_size + 1];
		memcpy(m_cstr, other, m_size + 1);
	}

	void operator=(const string& other) {
		m_cstr = new char[other.size() + 1];
		memcpy(m_cstr, other.c_str(), other.size() + 1);
		m_size = other.size();
	}

	bool operator== (const string& other) {
		// if they both dont have the same size then they cant be equal
		if (other.size() != m_size)
			return false;
		
		for (int i = 0; i < m_size; i++) {
			// if there is ever a character that doesnt match
			if (other[i] != m_cstr[i])
				return false;
		}
		return true;
	}

	char& operator[] (size_t index) {
		return m_cstr[index];
	}

	const char& operator[] (const size_t index) const {
		return m_cstr[index];
	}

	char* c_str() const {
		return m_cstr;
	}

	size_t size() const {
		return m_size;
	}

	~string() {
		delete[] m_cstr;		
	}
};



}

static ostream &operator<<(ostream &out, std::string val) {
	out.print(val.c_str());
	return out;
}

// custom slavdog os functions for string, seperated into different namespace

namespace os {

// changes all characters to be lowercase, and returns a reference to the string (you dont need to do   str = lower(str))
static std::string& upper(std::string& s) {
	for (int i = 0; i < s.size(); i++) {
		if (s[i] >= 'a' && s[i] <= 'z') {
			s[i] -= 0x20;
		}
	}
	return s;
}

static void upper(char* s) {
	for (int i = 0; i < strlen(s); i++) {
		if (s[i] >= 'a' && s[i] <= 'z') {
			s[i] -= 0x20;
		}
	}
}

// changes all characters to be lowercase, and returns a reference to the string (you dont need to do   str = lower(str))
static std::string& lower(std::string& s) {
	for (int i = 0; i < s.size(); i++) {
		if (s[i] >= 'A' && s[i] <= 'Z') {
			s[i] += 0x20;
		}
	}
	return s;
}

// splits the string into a vector
static std::vector<std::string> split(std::string& orig, char delem) {
	
	std::vector<std::string> vec;
	
	std::string buffer;
	
	for (int i = 0; i < orig.size(); i++) {

		if (orig[i] == delem) {
			vec.push_back(buffer);
			buffer = "";
			continue;
		}

		buffer += orig[i];
	}
	vec.push_back(buffer);
	return vec;
}

}